{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# analysis.ipynb\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential, load_model\n",
    "from tensorflow.keras.layers import LSTM, Dense\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# โหลดข้อมูลจาก CSV\n",
    "data = pd.read_csv('../data/resource_usage.csv', parse_dates=['Timestamp'], index_col='Timestamp')\n",
    "\n",
    "# ดูข้อมูลเบื้องต้น\n",
    "print(data.head())\n",
    "\n",
    "# สเกลข้อมูล\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "scaled_data = scaler.fit_transform(data)\n",
    "\n",
    "# เตรียมข้อมูลสำหรับ LSTM\n",
    "def create_dataset(data, look_back=3):\n",
    "    X, y = [], []\n",
    "    for i in range(len(data) - look_back):\n",
    "        X.append(data[i:(i + look_back), :])\n",
    "        y.append(data[i + look_back, 0])  # ทำนาย Processor Time\n",
    "    return np.array(X), np.array(y)\n",
    "\n",
    "look_back = 3\n",
    "X, y = create_dataset(scaled_data, look_back)\n",
    "\n",
    "# แบ่งข้อมูลสำหรับฝึกและทดสอบ\n",
    "train_size = int(len(X) * 0.8)\n",
    "X_train, X_test = X[:train_size], X[train_size:]\n",
    "y_train, y_test = y[:train_size], y[train_size:]\n",
    "\n",
    "# สร้างโมเดล LSTM\n",
    "model = Sequential()\n",
    "model.add(LSTM(100, return_sequences=True, input_shape=(look_back, X.shape[2])))\n",
    "model.add(LSTM(100))\n",
    "model.add(Dense(1))\n",
    "model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "# ฝึกโมเดล\n",
    "history = model.fit(X_train, y_train, epochs=10, batch_size=2, validation_split=0.1)\n",
    "\n",
    "# ทำนายข้อมูลทดสอบ\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# แปลงกลับจากสเกล\n",
    "y_test = scaler.inverse_transform(np.concatenate([y_test.reshape(-1, 1), np.zeros((y_test.shape[0], data.shape[1] - 1))], axis=1))[:, 0]\n",
    "y_pred = scaler.inverse_transform(np.concatenate([y_pred, np.zeros((y_pred.shape[0], data.shape[1] - 1))], axis=1))[:, 0]\n",
    "\n",
    "# คำนวณ RMSE\n",
    "rmse = np.sqrt(np.mean((y_pred - y_test) ** 2))\n",
    "print(f'Root Mean Squared Error: {rmse}')\n",
    "\n",
    "# แสดงกราฟการทำนาย\n",
    "plt.figure(figsize=(14, 7))\n",
    "plt.plot(data.index[-len(y_test):], y_test, label='Actual')\n",
    "plt.plot(data.index[-len(y_pred):], y_pred, label='Predicted')\n",
    "plt.title('CPU Usage Prediction')\n",
    "plt.xlabel('Timestamp')\n",
    "plt.ylabel('CPU Usage (%)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
